import base64
import re
import datetime
from bs4 import BeautifulSoup
from googleapiclient.discovery import build
from gmail_auth import authenticate_gmail

def get_email_body(payload):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏ HTML-–≤–µ—Ä—Å–∏—é –ø–∏—Å—å–º–∞"""
    message_body = ""
    html_body = ""

    if 'parts' in payload:
        for part in payload['parts']:
            mime_type = part.get('mimeType', '')
            if 'body' in part and 'data' in part['body']:
                data = part['body']['data']
                decoded_text = base64.urlsafe_b64decode(data).decode('utf-8', errors="ignore")

                if mime_type == 'text/plain':
                    message_body += decoded_text + "\n"
                elif mime_type == 'text/html':
                    html_body = decoded_text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML-–≤–µ—Ä—Å–∏—é

    elif 'body' in payload and 'data' in payload['body']:
        data = payload['body']['data']
        message_body = base64.urlsafe_b64decode(data).decode('utf-8', errors="ignore")

    return message_body if message_body else "No content available", html_body

def extract_order_details(email_text, email_html):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–∏—Å–µ–º ASOS"""
    order_items = []

    print("üîé –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã...")
    item_pattern = re.findall(r'(\b[A-Za-z0-9&\-\s]+)\s+\‚Ç¨\d+[\.,]\d{2}', email_text)

    image_links = re.findall(r'(https?://[^\s]+(?:jpg|jpeg|png|webp))', email_text)

    # üîπ –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ, –∏—â–µ–º –∏—Ö –≤ HTML
    if not image_links and email_html:
        print("üîé –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ HTML...")
        soup = BeautifulSoup(email_html, 'html.parser')
        img_tags = soup.find_all('img')
        image_links = [img['src'] for img in img_tags if 'src' in img.attrs]

    for index, item in enumerate(item_pattern):
        item_info = {
            "name": item.strip(),
            "image": image_links[index] if index < len(image_links) else "No image available"
        }
        order_items.append(item_info)

    print(f"üõç –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(order_items)}")
    return order_items

def convert_timestamp_to_date(timestamp):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç UNIX timestamp –∏–∑ Gmail API –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"""
    date = datetime.datetime.fromtimestamp(int(timestamp) / 1000, datetime.UTC)
    return date.strftime('%Y-%m-%d %H:%M:%S')

def fetch_asos_orders():
    """–ò—â–µ—Ç –≤—Å–µ —á–µ–∫–∏ –∏–∑ ASOS —Å subject 'Thanks for your order!' –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ fetch_asos_orders.py...")

    creds = authenticate_gmail()
    print("‚úÖ Gmail API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!")

    service = build('gmail', 'v1', credentials=creds)
    print("üì© –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gmail API...")

    # üîπ –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY/MM/DD
    today = datetime.datetime.today().strftime('%Y/%m/%d')

    # üîπ –ò—â–µ–º –¢–û–õ–¨–ö–û –ø–∏—Å—å–º–∞ –æ—Ç ASOS —Å —Ç–µ–º–æ–π "Thanks for your order!" —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
    query = f'from:ilija.junkin@gmail.com AND subject:"Thanks for your order!" AND after:2021/02/01'

    print(f"üîé –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–∏—Å–µ–º —Å –∑–∞–ø—Ä–æ—Å–æ–º: {query}")
    results = service.users().messages().list(userId='me', q=query, maxResults=20).execute()
    messages = results.get('messages', [])

    print(f"üì¨ –ù–∞–π–¥–µ–Ω–æ {len(messages)} –ø–∏—Å–µ–º!" if messages else "‚ùå –ü–∏—Å–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    if not messages:
        return
    
    for msg in messages:
        try:
            msg_id = msg['id']
            print(f"\nüìß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∏—Å—å–º–æ ID: {msg_id}")

            email_data = service.users().messages().get(userId='me', id=msg_id, format='full').execute()
            payload = email_data['payload']
            headers = payload['headers']

            # üîπ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –ø–∏—Å—å–º–∞
            subject = next((header['value'] for header in headers if header['name'] == 'Subject'), 'No Subject')

            # üîπ –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            sender = next((header['value'] for header in headers if header['name'] == 'From'), 'Unknown Sender')

            # üîπ –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–∏—Å—å–º–∞
            date_timestamp = email_data.get('internalDate', 'Unknown Date')
            email_date = convert_timestamp_to_date(date_timestamp) if date_timestamp != 'Unknown Date' else "Unknown Date"

            print(f"üì© Subject: {subject}\nüë§ Sender: {sender}\nüìÖ Date: {email_date}")

            # üîπ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ HTML-–≤–µ—Ä—Å–∏—é –ø–∏—Å—å–º–∞
            email_text, email_html = get_email_body(payload)

            # üîπ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
            order_items = extract_order_details(email_text, email_html)
            if not order_items:
                print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —ç—Ç–æ–º –ø–∏—Å—å–º–µ.")
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∏—Å—å–º–æ, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤

            print("üõç Ordered items:")
            for item in order_items:
                print(f"- {item['name']}")
                print(f"  üñº Image: {item['image']}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞ {msg_id}: {e}")

if __name__ == "__main__":
    fetch_asos_orders()