import base64
import datetime
from bs4 import BeautifulSoup
from googleapiclient.discovery import build
from gmail_auth import authenticate_gmail

def get_email_body(payload):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç HTML-–≤–µ—Ä—Å–∏—é –ø–∏—Å—å–º–∞."""
    html_body = ""

    if 'parts' in payload:
        for part in payload['parts']:
            if part.get('mimeType') == 'text/html' and 'body' in part and 'data' in part['body']:
                html_body = base64.urlsafe_b64decode(part['body']['data']).decode('utf-8', errors="ignore")

    return html_body.strip()

def extract_product_details(email_html):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ HTML."""
    if not email_html:
        print("‚ùå HTML-–∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return []

    soup = BeautifulSoup(email_html, 'html.parser')

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –ø–∏—Å—å–º–µ
    product_blocks = soup.find_all('tr')  

    order_items = []
    seen_items = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

    for block in product_blocks:
        # üîç –ù–∞—Ö–æ–¥–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        img_tag = block.find('img')
        img_url = img_tag['src'] if img_tag and 'src' in img_tag.attrs else None

        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ª–æ–≥–æ—Ç–∏–ø—ã, Mastercard –∏ —Ç. –¥.)
        if img_url and ("asoslogo" in img_url or "content/images" in img_url or "mastercard" in img_url):
            continue  

        # üîç –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–æ–±—ã—á–Ω–æ –≤ <td>)
        name_tag = block.find('td')
        name = name_tag.get_text(strip=True) if name_tag else None

        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if name and img_url and (name, img_url) not in seen_items:
            order_items.append({"name": name, "image": img_url})
            seen_items.add((name, img_url))  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–æ—Å—å

    if not order_items:
        print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return []

    print(f"üõç –ù–∞–π–¥–µ–Ω–æ {len(order_items)} —Ç–æ–≤–∞—Ä–æ–≤.")
    return order_items

def fetch_asos_orders():
    """–ò—â–µ—Ç –∑–∞–∫–∞–∑—ã –∏–∑ ASOS."""
    print("üöÄ –ó–∞–ø—É—Å–∫ fetch_asos_orders.py...")

    creds = authenticate_gmail()
    service = build('gmail', 'v1', credentials=creds)

    query = f'from:ilija.junkin@gmail.com AND subject:"Thanks for your order!" AND after:2021/02/01'

    print(f"üîé –ü–æ–∏—Å–∫ –ø–∏—Å–µ–º —Å –∑–∞–ø—Ä–æ—Å–æ–º: {query}")
    results = service.users().messages().list(userId='me', q=query, maxResults=10).execute()
    messages = results.get('messages', [])

    if not messages:
        print("‚ùå –ó–∞–∫–∞–∑—ã ASOS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    for msg in messages:
        try:
            msg_id = msg['id']
            email_data = service.users().messages().get(userId='me', id=msg_id, format='full').execute()
            payload = email_data['payload']

            email_html = get_email_body(payload)  # –ü–æ–ª—É—á–∞–µ–º HTML-–≤–µ—Ä—Å–∏—é

            # üîπ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã
            order_items = extract_product_details(email_html)

            if order_items:
                print("\nüõç ASOS Order Details:")
                for item in order_items:
                    print(f"- {item['name']}")
                    print(f"  üñº {item['image']}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞ {msg_id}: {e}")

if __name__ == "__main__":
    fetch_asos_orders()